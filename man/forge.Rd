% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/forge.R
\name{forge}
\alias{forge}
\title{Forests for Generative Modeling}
\usage{
forge(
  params,
  n_synth,
  evidence = NULL,
  evidence_row_mode = c("separate", "or"),
  sample_NAs = FALSE,
  stepsize = 0,
  parallel = TRUE
)
}
\arguments{
\item{params}{Circuit parameters learned via \code{\link{forde}}.}

\item{n_synth}{Number of synthetic samples to generate.}

\item{evidence}{Optional set of conditioning events. A data.frame, which can be
incomplete, i.e. include not all columns, can contain NAs or include intervals,
e.g. for inequalities; see examples.}

\item{evidence_row_mode}{Interpretation of rows in multi-row evidence. If \code{'separate'},
each row in \code{evidence} is a separate conditioning event for which \code{n_synth} synthetic samples
are generated. If \code{'or'}, the rows are combined with a logical or; see examples.}

\item{sample_NAs}{Sample NAs respecting the probability for missing values in the original data.}

\item{stepsize}{Stepsize defining number of evidence rows handled in one for each step.
Defaults to nrow(evidence)/num_registered_workers for \code{parallel == TRUE}.}

\item{parallel}{Compute in parallel? Must register backend beforehand, e.g.
via \code{doParallel}.}
}
\value{
A dataset of \code{n_synth} synthetic samples.
}
\description{
Uses pre-trained FORDE model to simulate synthetic data.
}
\details{
\code{forge} simulates a synthetic dataset of \code{n_synth} samples. First,
leaves are sampled in proportion to either their coverage (if
\code{evidence = NULL}) or their posterior probability. Then, each feature is
sampled independently within each leaf according to the probability mass or
density function learned by \code{\link{forde}}. This will create realistic
data so long as the adversarial RF used in the previous step satisfies the
local independence criterion. See Watson et al. (2023).
}
\examples{
arf <- adversarial_rf(iris)
psi <- forde(arf, iris)
x_synth <- forge(psi, n_synth = 100)

# Condition on Species = "setosa"
evi <- data.frame(Species = "setosa")
x_synth <- forge(psi, n_synth = 100, evidence = evi)

# Condition on Species = "setosa" and Sepal.Length > 6
evi <- data.frame(Species = "setosa",
                  Sepal.Length = "(6, Inf)")
x_synth <- forge(psi, n_synth = 100, evidence = evi)

# Alternative syntax for </> conditions
evi <- data.frame(Sepal.Length = ">6")
x_synth <- forge(psi, n_synth = 100, evidence = evi)

# Negation condition, i.e. all classes except "setosa"
evi <- data.frame(Species = "!setosa")
x_synth <- forge(psi, n_synth = 100, evidence = evi)

# Condition on first two data rows with some missing values
evi <- iris[1:2,]
evi[1, 1] <- NA_real_
evi[1, 5] <- NA_character_
evi[2, 2] <- NA_real_
x_synth <- forge(psi, n_synth = 1, evidence = evi)

}
\references{
Watson, D., Blesch, K., Kapar, J., & Wright, M. (2023). Adversarial random
forests for density estimation and generative modeling. In \emph{Proceedings
of the 26th International Conference on Artificial Intelligence and
Statistics}, pp. 5357-5375.
}
\seealso{
\code{\link{adversarial_rf}}, \code{\link{forde}}
}
